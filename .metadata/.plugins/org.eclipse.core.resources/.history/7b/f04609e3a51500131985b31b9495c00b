/*
 * SamsungQuizQ3.c
 *
 *  Created on: Sep 4, 2013
 *      Author: Sriram
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int solutionq1 (int A, int B){

	//This question involves finding the decimal zip of two numbers A and B to make C
	//The decimal zip of 1123 and 5432 should be 15142332. If the number is larger
	//than 100000000 throw it away.
	//O(logA + logB) time complexity. O(1) space complexity
	return 0;
}

int solutionq2 (char* S){
	int stepCounter = 0;
	//This question involves finding the
	return stepCounter;
}


int solutionq3 (char* S){
	int stepCounter = 0;
	int shift = 0;
	int intS = 0;
	int intLSB;
	char* lsb = S;
	char lsbChar;

	//This question involves finding out how many steps the binary string needs
	//for it to become zero. If it is even, divide by two. If odd, subtract 1.
	//If the number is larger than 100000 then reject it
	//O(n) time complexity, O(1) space complexity

	//Remember to check for an empty or NULL string
	if (S == NULL || *S == '\0'){
		return -1;
	}

	//Convert the input binary string to an integer. Easier to work with.
	//Move the lsb pointer to the end of S
	while(*lsb != '\0'){
		lsb++;
	}
	lsb--;

	//Read in each of the 'bits' from the string and add them to intS


	while (lsb >= S){
		lsbChar = *lsb;
		intLSB = atoi(&lsbChar);
		printf("intLSB = %d\n", intLSB);
		intS = intS | (intLSB << shift);
		printf("intS = %X\n", intS);
		shift++;
		lsb--;
	}




	return stepCounter;
}



int main (void){
	char* S = "1011010";
	solutionq3(S);

	return 0;
}
